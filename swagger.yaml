openapi: 3.0.3
info:
  title: City Guardian
  version: 1.0.0
  description: Documentación de la API para el sistema

servers:
  - url: http://localhost:8080/api/
    description: Servidor local de desarrollo

security:
  - BearerAuth: []

paths:
  /login:
    post:
      summary: Iniciar sesión y obtener un token JWT
      security: []
      tags:
        - Autenticación
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CredencialesLogin"
      responses:
        "200":
          description: Inicio de sesión exitoso, devuelve el token de acceso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RespuestaToken"
        "400":
          description: Datos de inicio de sesión incorrectos o faltantes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRespuesta"
        "401":
          description: Usuario o contraseña incorrectos
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRespuesta"
        "500":
          description: Error interno del servidor.
  /reset-password:
    post:
      summary: Solicitar restablecimiento de contraseña
      security: []
      tags:
        - Autenticación
      description: |
        Envia un código de verificación al correo del usuario para restablecer la contraseña.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestResetPassword"
      responses:
        "200":
          description: Código enviado con éxito al correo
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RespuestaGeneral"
        "400":
          description: Formato de correo inválido o correo no registrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRespuestaResetPassword"
        "500":
          description: Error interno del servidor.
  /reset-password/verify:
    post:
      summary: Verificar código de recuperación
      tags:
        - Autenticación
      description: |
        Permite verificar el código de recuperación enviado por correo.
        Si el código es válido, devuelve el ID del usuario.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerificarCodigo"
      responses:
        "200":
          description: Código válido, devuelve el ID del usuario
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RespuestaVerificacion"
        "400":
          description: Código incorrecto o expirado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRespuesta"
        "500":
          description: Error interno del servidor.

    put:
      summary: Restaurar contraseña
      tags:
        - Autenticación
      description: |
        Permite cambiar la contraseña si el código de verificación fue validado correctamente.
        La nueva contraseña debe ser confirmada.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NuevaContrasena"
      responses:
        "200":
          description: Contraseña actualizada con éxito
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RespuestaGeneral"
        "400":
          description: Datos inválidos o contraseñas no coinciden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRespuesta"
        "401":
          description: No autorizado (código inválido o expirado)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRespuesta"
        "500":
          description: Error interno del servidor.
  /users:
    get:
      summary: Obtiene la lista de clientes
      tags:
        - Cliente
      responses:
        "200":
          description: Lista de clientes obtenida con éxito
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RespuestaListaClientes"
        "400":
          description: Solicitud incorrecta
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRespuesta"
        "401":
          description: No autorizado (token inválido o ausente)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRespuesta"
        "500":
          description: Error interno del servidor.

    post:
      summary: Crea un nuevo cliente (sin autenticación)
      security: [] # 🔴 No requiere autenticación
      tags:
        - Cliente
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NuevoCliente"
      responses:
        "201":
          description: Cliente creado con éxito
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RespuestaCliente"
        "400":
          description: Datos de entrada inválidos
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRespuesta"
        "500":
          description: Error interno del servidor.
    patch:
      summary: Actualiza un cliente existente
      tags:
        - Cliente
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Cliente"
      responses:
        "200":
          description: Cliente actualizado con éxito
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RespuestaCliente"
        "400":
          description: Datos de actualización inválidos
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRespuesta"
        "401":
          description: No autorizado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRespuesta"
        "500":
          description: Error interno del servidor.

  /users/{id}:
    get:
      summary: Obtiene un cliente por ID
      tags:
        - Cliente
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Cliente obtenido con éxito
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RespuestaCliente"
        "400":
          description: ID de cliente inválido
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRespuesta"
        "401":
          description: No autorizado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRespuesta"
        "500":
          description: Error interno del servidor.

    delete:
      summary: Elimina un cliente por ID
      tags:
        - Cliente
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Cliente eliminado con éxito
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RespuestaGeneral"
        "400":
          description: ID de cliente inválido
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRespuesta"
        "401":
          description: No autorizado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRespuesta"
        "500":
          description: Error interno del servidor.
  /reports:
    get:
      summary: Obtener la lista de reportes del cliente
      security:
        - BearerAuth: []
      tags:
        - Reportes
      description: |
        Permite al cliente ver la lista de reportes que ha generado.
      responses:
        "200":
          description: Lista de reportes obtenida con éxito
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RespuestaListaReportes"
        "400":
          description: Solicitud incorrecta
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRespuesta"
        "401":
          description: No autorizado (token faltante o inválido)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRespuesta"
    post:
      summary: Crear un nuevo reporte
      security:
        - BearerAuth: []
      tags:
        - Reportes
      description: |
        Permite al cliente crear un nuevo reporte.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NuevoReporte"
      responses:
        "201":
          description: Reporte creado con éxito
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RespuestaReporte"
        "400":
          description: Datos inválidos o faltantes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRespuesta"
        "401":
          description: No autorizado (token faltante o inválido)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRespuesta"
        "500":
          description: Error interno del servidor.
  /reports/{id}:
    put:
      summary: Editar un reporte existente
      security:
        - BearerAuth: [] # 🔐 Requiere autenticación con token
      tags:
        - Reportes
      description: |
        Permite al cliente editar un reporte previamente creado, modificando el título, descripción, dirección e imágenes.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID del reporte a editar
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditarReporte"
      responses:
        "200":
          description: Reporte actualizado con éxito
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RespuestaReporte"
        "400":
          description: Datos inválidos o faltantes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRespuesta"
        "401":
          description: No autorizado (token faltante o inválido)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRespuesta"
        "404":
          description: Reporte no encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRespuesta"
        "500":
          description: Error interno del servidor.
    delete:
      summary: Eliminar un reporte existente
      security:
        - BearerAuth: [] # 🔐 Requiere autenticación con token
      tags:
        - Reportes
      description: |
        Permite al cliente eliminar un reporte previamente creado. 
        Se debe confirmar la eliminación antes de proceder.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID del reporte a eliminar
      responses:
        "200":
          description: Reporte eliminado con éxito
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RespuestaGeneral"
        "400":
          description: ID de reporte inválido
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRespuesta"
        "401":
          description: No autorizado (token faltante o inválido)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRespuesta"
        "404":
          description: Reporte no encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRespuesta"
        "500":
          description: Error interno del servidor.
    get:
      summary: Obtener el detalle de un reporte
      security:
        - BearerAuth: [] # 🔐 Requiere autenticación
      tags:
        - Reportes
      description: |
        Permite al cliente ver el detalle completo de un reporte, 
        incluyendo su trazabilidad de estados, comentarios y opciones de acción.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID del reporte a consultar
      responses:
        "200":
          description: Detalle del reporte obtenido con éxito
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RespuestaDetalleReporte"
        "400":
          description: ID de reporte inválido
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRespuesta"
        "401":
          description: No autorizado (token faltante o inválido)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRespuesta"
        "404":
          description: Reporte no encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRespuesta"
        "500":
          description: Error interno del servidor.
  /reports/{id}/solve:
    put:
      summary: Marcar un reporte como resuelto
      security:
        - BearerAuth: []
      tags:
        - Reportes
      description: |
        Permite al cliente marcar un reporte como resuelto. 
        Un modal de confirmación debe aparecer antes de procesar la solicitud.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID del reporte a marcar como resuelto
      responses:
        "200":
          description: Reporte marcado como resuelto con éxito
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RespuestaGeneral"
        "400":
          description: ID de reporte inválido o estado incorrecto
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRespuesta"
        "401":
          description: No autorizado (token faltante o inválido)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRespuesta"
        "404":
          description: Reporte no encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRespuesta"
        "500":
          description: Error interno del servidor.
  /reports/{id}/important:
    put:
      summary: Marcar o desmarcar un reporte como importante
      security:
        - BearerAuth: [] # 🔐 Requiere autenticación
      tags:
        - Reportes
      description: |
        Permite al cliente marcar un reporte como importante o quitarle la clasificación de importante.
        Si el reporte ya es importante, lo desmarca; si no lo es, lo marca como importante.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID del reporte a clasificar
      responses:
        "200":
          description: Estado del reporte actualizado correctamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RespuestaGeneral"
        "400":
          description: ID de reporte inválido
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRespuesta"
        "401":
          description: No autorizado (token faltante o inválido)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRespuesta"
        "404":
          description: Reporte no encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRespuesta"
        "500":
          description: Error interno del servidor.
  /reports/{id}/comments:
    post:
      summary: Agregar un comentario a un reporte
      security:
        - BearerAuth: [] # 🔐 Requiere autenticación
      tags:
        - Reportes
      description: |
        Permite a un cliente agregar un comentario a un reporte específico.
        El comentario debe tener entre 5 y 200 caracteres.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID del reporte al que se agregará el comentario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NuevoComentario"
      responses:
        "201":
          description: Comentario agregado con éxito
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RespuestaComentario"
        "400":
          description: Datos inválidos (comentario muy corto o largo)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRespuesta"
        "401":
          description: No autorizado (token faltante o inválido)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRespuesta"
        "404":
          description: Reporte no encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRespuesta"
        "500":
          description: Error interno del servidor.
  /reports/filter:
    post:
      summary: Filtrar reportes
      security:
        - BearerAuth: []
      tags:
        - Reportes
      description: |
        Devuelve una lista de reportes aplicando filtros como fecha, estado y categoría.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                initialDate:
                  type: string
                  format: date
                  example: "2025-04-13"
                  description: Fecha de inicio del filtro (YYYY-MM-DD)
                finalDate:
                  type: string
                  format: date
                  example: "2025-04-16"
                  description: Fecha de fin del filtro (YYYY-MM-DD)
                status:
                  type: string
                  enum: [CREATED, VERIFIED, REJECTED, SOLVED]
                  example: "CREATED"
                  description: Estado del reporte
                category:
                  type: string
                  example: "ACCIDENT"
                  description: Categoría del reporte
      responses:
        "200":
          description: Lista de reportes filtrados obtenida con éxito
          content:
            application/json:
              schema:
                type: object
                properties:
                  reportes:
                    type: array
                    items:
                      $ref: "#/components/schemas/Reporte"
        "400":
          description: Parámetros inválidos
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRespuesta"
        "401":
          description: No autorizado (token inválido o ausente)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRespuesta"
        "500":
          description: Error interno del servidor

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    DetalleReporte:
      type: object
      properties:
        id:
          type: integer
          example: 1
        titulo:
          type: string
          example: "Árbol caído en la vía"
        descripcion:
          type: string
          example: "Un árbol bloquea la calle principal"
        direccion:
          type: string
          example: "Calle 5, Zona Centro"
        imagenes:
          type: array
          items:
            type: string
            format: uri
          example:
            [
              "https://ejemplo.com/imagen1.jpg",
              "https://ejemplo.com/imagen2.jpg",
            ]
        estado_actual:
          type: string
          enum: ["Creado", "Verificado", "Rechazado", "Resuelto"]
          example: "Verificado"
        trazabilidad_estados:
          type: array
          items:
            $ref: "#/components/schemas/EstadoReporte"
        comentarios:
          type: array
          items:
            $ref: "#/components/schemas/Comentario"
    RespuestaVerificacion:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Código válido"
        data:
          type: object
          properties:
            id:
              type: integer
              example: 42
    NuevaContrasena:
      type: object
      required:
        - id
        - nuevaContraseña
        - confirmarContraseña
      properties:
        id:
          type: integer
          example: 42
        nuevaContraseña:
          type: string
          format: password
          example: "NuevaClave123"
        confirmarContraseña:
          type: string
          format: password
          example: "NuevaClave123"
    VerificarCodigo:
      type: object
      required:
        - correo
        - codigo
      properties:
        correo:
          type: string
          format: email
          example: "usuario@example.com"
        codigo:
          type: string
          example: "123456"
    Comentario:
      type: object
      properties:
        usuario:
          type: string
          example: "juanperez"
        mensaje:
          type: string
          example: "Espero que solucionen esto pronto"
        fecha:
          type: string
          format: date-time
          example: "2024-03-04T15:00:00Z"
    EstadoReporte:
      type: object
      properties:
        estado:
          type: string
          enum: ["Creado", "Verificado", "Rechazado", "Resuelto"]
          example: "Verificado"
        fecha_cambio:
          type: string
          format: date-time
          example: "2024-03-04T14:30:00Z"
    NuevoReporte:
      type: object
      required:
        - title
        - description
        - address
        - status
        - category
      properties:
        title:
          type: string
          example: "Fuga de agua en la calle"
        description:
          type: string
          example: "Se ha detectado una fuga de agua en la avenida principal."
        address:
          type: string
          example: "Avenida Siempre Viva 742, Springfield"
        status:
          type: string
          example: "CREATED"
        category:
          type: string
          example: "ACCIDENT"

    Reporte:
      type: object
      properties:
        id:
          type: integer
          example: 123
        titulo:
          type: string
          example: "Falla en el sistema"
        descripcion:
          type: string
          example: "El sistema se reinicia inesperadamente."
        fecha_creacion:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        estado:
          type: string
          enum: [Creado, Verificado, Rechazado, Resuelto]
          example: "Verificado"
        categoria:
          type: string
          example: "Incidente"
    NuevoCliente:
      type: object
      required:
        - name
        - lastName
        - phone
        - city
        - address
        - email
        - password
      properties:
        name:
          type: string
          example: "Juan"
        lastName:
          type: string
          example: "Pérez"
        phone:
          type: string
          example: "3225733653"
        city:
          type: string
          example: "Armenia"
        address:
          type: string
          example: "Calle Falsa 123, Ciudad, País"
        email:
          type: string
          format: email
          example: "juan.perez@example.com"
        password:
          type: string
          example: "secreto123"

    Cliente:
      type: object
      required:
        - name
        - lastName
        - phone
        - city
        - address
        - email

      properties:
        name:
          type: string
          example: "Juan"
        lastName:
          type: string
          example: "Pérez"
        phone:
          type: string
          example: "3225733653"
        city:
          type: string
          example: "Armenia"
        address:
          type: string
          example: "Calle Falsa 123, Ciudad, País"
        email:
          type: string
          format: email
          example: "juan.perez@example.com"

    RespuestaCliente:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operación exitosa"
        data:
          $ref: "#/components/schemas/Cliente"
        errors:
          type: object
          nullable: true
          example: null

    RespuestaListaClientes:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operación exitosa"
        data:
          type: array
          items:
            $ref: "#/components/schemas/Cliente"
        errors:
          type: object
          nullable: true
          example: null

    RespuestaGeneral:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operación exitosa"
        errors:
          type: object
          nullable: true
          example: null

    ErrorRespuesta:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Error en la solicitud"
        errors:
          type: array
          items:
            type: string
          example: ["El token es inválido", "Faltan datos requeridos"]

    ErrorRespuestaResetPassword:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Error"
        errors:
          type: array
          items:
            type: string
          example: ["Error el Correo no existe"]

    CredencialesLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: "juan.perez@example.com"
        password:
          type: string
          example: "secreto123"

    RespuestaToken:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Inicio de sesión exitoso"
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    RequestResetPassword:
      type: object
      required:
        - correo
      properties:
        correo:
          type: string
          format: email
          example: "juan.perez@example.com"
    VerifyResetPassword:
      type: object
      required:
        - correo
        - codigo
        - nueva_contraseña
      properties:
        correo:
          type: string
          format: email
          example: "juan.perez@example.com"
        codigo:
          type: string
          example: "123456"
    ErrorRespuestaVerifyLogin:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Error en la solicitud"
        errors:
          type: array
          items:
            type: string
          example: ["codigo invalido", "codigo expirado"]
    RespuestaListaReportes:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Lista de reportes obtenida exitosamente"
        data:
          type: array
          items:
            $ref: "#/components/schemas/Reporte"
        errors:
          type: object
          nullable: true
          example: null
    RespuestaReporte:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Reporte creado exitosamente"
        data:
          $ref: "#/components/schemas/Reporte"
        errors:
          type: object
          nullable: true
          example: null
    EditarReporte:
      type: object
      properties:
        title:
          type: string
          example: "Fuga de agua en la calle"
        description:
          type: string
          example: "Se ha detectado una fuga de agua en la avenida principal."
        address:
          type: string
          example: "Avenida Siempre Viva 742, Springfield"
        status:
          type: string
          example: "CREATED"
        category:
          type: string
          example: "ACCIDENT"
    RespuestaDetalleReporte:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Reporte obtenido exitosamente"
        data:
          $ref: "#/components/schemas/DetalleReporte"
        errors:
          type: object
          nullable: true
          example: null
    RespuestaComentario:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Comentario agregado con éxito"
        data:
          type: object
          properties:
            id:
              type: integer
              example: 123
            comentario:
              type: string
              example: "Este reporte necesita más información."
            fecha:
              type: string
              format: date-time
              example: "2025-03-04T12:34:56Z"
        errors:
          type: object
          nullable: true
          example: null
    NuevoComentario:
      type: object
      required:
        - description
      properties:
        description:
          type: string
          minLength: 5
          maxLength: 200
          example: "Este reporte necesita más información."
